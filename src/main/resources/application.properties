quarkus.application.name=sakila-videostore-processes
quarkus.http.cors=true
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.http.test-port=0
quarkus.native.native-image-xmx=8g

# Host & port (only dev mode)
%dev.quarkus.http.host=localhost
%dev.quarkus.http.port=8080

# Swagger-ui (only dev mode)
%dev.quarkus.swagger-ui.always-include=true

kogito.persistence.proto.marshaller=false
kogito.generate.rest.processes=true
kogito.persistence.type=jdbc
kogito.decisions.validation=ENABLED

# Enabling dev-services (only dev mode)
%dev.quarkus.kogito.devservices.enabled=true
%dev.quarkus.devservices.enabled=true

# Data-Index UI
quarkus.kogito.data-index.graphql.ui.always-include=true

# Kogito-service (only dev mode)
%dev.kogito.service.url=http://localhost:8080

#Job-service (only dev mode)
%dev.kogito.jobs-service.url=http://localhost:8080
#%dev.kogito.data-index.url=http://localhost:8080
%dev.kogito.dataindex.http.url=http://localhost:8080
%dev.kogito.dataindex.ws.url=ws://localhost:8080
%dev.quarkus.embedded.postgresql.port=5432

%dev.jbpm.devui.users.jdoe.groups=admin,HR,IT

# Kogito Datasource (only dev mode)
%dev.quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.username=postgres
%dev.quarkus.datasource.password=postgres
%dev.quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=kogito}
%dev.quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://localhost:5432/postgres?currentSchema=kogito}

# External business services (only dev mode, for process "ServiceTaskProcess")
%dev.quarkus.rest-client."sakila-videostore-rest-services-url".url=http://localhost:18081

# run create tables scripts
quarkus.flyway.migrate-at-start=true
quarkus.flyway.baseline-on-migrate=true
quarkus.flyway.baseline-version=0.0
quarkus.flyway.locations=classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql
quarkus.flyway.table=FLYWAY_RUNTIME_SERVICE
quarkus.flyway.out-of-order=true

# profile to pack this example into a container, to use it execute activate the maven container profile, -Pcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=jizuzquiza
%container.quarkus.container-image.tag=0.0.1
%container.quarkus.container-image.name=sakila-videostore-processes-workflows

# Disabling OIDC
quarkus.oidc.enabled=false

# Logs
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.logging-manager.openapi.included=true

%dev.quarkus.log.category."org.kie.kogito".level=INFO

# OpenTelemetry Traces (Jaeger)
#%container.quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317
#%container.quarkus.otel.exporter.otlp.traces.headers=Authorization=Bearer my_secret

# OpenTelemetry Metrics (Jaeger)
#%container.quarkus.micrometer.export.otlp.enabled=true
#%container.quarkus.micrometer.registry-enabled-default=true
#%container.quarkus.micrometer.export.otlp.get-enabled=true
#%container.quarkus.micrometer.export.otlp.url=http://localhost:4318/v1/metrics

# JDBC observability
#%container.quarkus.datasource.jdbc.telemetry=false
#%containerquarkus.datasource.jdbc.tracing=false

%dev.kafka.bootstrap.servers=localhost:9092

%dev.kogito.addon.messaging.incoming.defaultName=sakila

%dev.mp.messaging.incoming.sakila.connector=smallrye-kafka
%dev.mp.messaging.incoming.sakila.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.sakila.group.id=kogito-kafka-one
%dev.mp.messaging.incoming.sakila.auto.offset.reset=earliest


%dev.mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
%dev.mp.messaging.outgoing.kogito_outgoing_stream.topic=sakila-videostore
%dev.mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.kogito_outgoing_stream.group.id=kogito-kafka-one


#mp.messaging.outgoing.kogito-processinstances-events.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
%dev.mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
%dev.mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#mp.messaging.outgoing.kogito-usertaskinstances-events.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
%dev.mp.messaging.outgoing.kogito-usertaskinstances-events.topic=kogito-usertaskinstances-events
%dev.mp.messaging.outgoing.kogito-usertaskinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#mp.messaging.outgoing.kogito-variables-events.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
%dev.mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
%dev.mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

%dev.mp.messaging.outgoing.kogito-processdefinitions-events.connector=smallrye-kafka
%dev.mp.messaging.outgoing.kogito-processdefinitions-events.topic=kogito-processdefinitions-events
%dev.mp.messaging.outgoing.kogito-processdefinitions-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer